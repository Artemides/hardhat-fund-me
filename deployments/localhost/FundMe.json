{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agregatorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotEnoughDonation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "FoundsWithdrawn",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_founder",
          "type": "address"
        }
      ],
      "name": "founderExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAgregator",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "founder",
          "type": "address"
        }
      ],
      "name": "getFounderFounds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalFunds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "avaiableFund",
              "type": "uint256"
            }
          ],
          "internalType": "struct FundMe.FundObj",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawCheaper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xff400c0630bdb7ab38bbbfb57a02767c652c3e97a41dfbd85a8f745a1e09e517",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1038766",
    "logsBloom": "0x
    "blockHash": "0x32b087e5cc3e508c6b7849fdf1007998c792a26f6a3355264ea1a09d223e49ea",
    "transactionHash": "0xff400c0630bdb7ab38bbbfb57a02767c652c3e97a41dfbd85a8f745a1e09e517",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1038766",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "13fcbf91ddaa1a041e1630b76286a08f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agregatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotEnoughDonation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FoundsWithdrawn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_founder\",\"type\":\"address\"}],\"name\":\"founderExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAgregator\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"founder\",\"type\":\"address\"}],\"name\":\"getFounderFounds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"avaiableFund\",\"type\":\"uint256\"}],\"internalType\":\"struct FundMe.FundObj\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCheaper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"edmund\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"use testnet address or get an address from local blockchains\",\"params\":{\"agregatorAddress\":\":this is the address which contains the price from eth to usd\"}},\"founderExists(address)\":{\"params\":{\"_founder\":\": if the founder exist\"}},\"withdraw()\":{\"details\":\"this function should be only called by the contract's owner\"}},\"title\":\"Thid is a contract for croud founding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"founderExists(address)\":{\"notice\":\"find the founder for the purpuse of adding him again or not into the founders list\"},\"fund()\":{\"notice\":\"the fund function is public for those who want to fund or donate a minimun usd as eth\"},\"withdraw()\":{\"notice\":\"this function does not restore the ones that have founded this contract, they are registered forever\"}},\"notice\":\"this contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/ConverterCurrency.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary ConvertCurrency {\\n    function getCurrentPriceUSD(\\n        AggregatorV3Interface agregator\\n    ) internal view returns (uint256) {\\n        // AggregatorV3Interface agregator = AggregatorV3Interface(\\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        // );\\n\\n        (, int256 price, , , ) = agregator.latestRoundData();\\n\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConvertionRate(\\n        uint256 ethAmmount,\\n        AggregatorV3Interface agregator\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getCurrentPriceUSD(agregator);\\n        uint256 convertionRate = (ethAmmount * ethPrice) / 1e18;\\n        return convertionRate;\\n    }\\n}\\n\",\"keccak256\":\"0xcd38c88ba7f3d62586061ccc9607a56f68e398e5d9db2e88f42d7c62e2457752\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.18;\\n\\nimport \\\"./ConverterCurrency.sol\\\";\\n\\n/**\\n *@title Thid is a contract for croud founding\\n *@author edmund\\n *@notice this contract\\n */\\n\\ncontract FundMe {\\n    using ConvertCurrency for uint256;\\n\\n    address payable private immutable i_owner;\\n    uint256 private constant MIN_USD = 50 * 1e18;\\n    AggregatorV3Interface internal s_agregator;\\n    address[] private s_founders;\\n    mapping(address => FundObj) private s_foundsByFounder;\\n\\n    struct FundObj {\\n        uint256 totalFunds;\\n        uint256 avaiableFund;\\n    }\\n\\n    event FoundsWithdrawn();\\n\\n    error NotEnoughDonation();\\n    error NotOwner();\\n    error WithdrawFailed();\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) revert NotOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev use testnet address or get an address from local blockchains\\n     * @param agregatorAddress:this is the address which contains the price from eth to usd\\n     */\\n    constructor(address agregatorAddress) {\\n        i_owner = payable(msg.sender);\\n        s_agregator = AggregatorV3Interface(agregatorAddress);\\n    }\\n\\n    /**\\n     * @notice the fund function is public for those who want to fund or donate a minimun usd as eth\\n     */\\n    function fund() public payable {\\n        uint256 foundUSD = msg.value.getConvertionRate(s_agregator);\\n        (bool founderAdded, ) = founderExists(msg.sender);\\n        if (foundUSD < MIN_USD) revert NotEnoughDonation();\\n\\n        if (!founderAdded) s_founders.push(msg.sender);\\n\\n        s_foundsByFounder[msg.sender].totalFunds += msg.value;\\n        s_foundsByFounder[msg.sender].avaiableFund += msg.value;\\n    }\\n\\n    /**\\n     * @notice this function does not restore the ones that have founded this contract, they are registered forever\\n     * @dev this function should be only called by the contract's owner\\n     */\\n    function withdraw() public onlyOwner {\\n        uint256 ammount;\\n        for (\\n            uint256 founderIdx = 0;\\n            founderIdx < s_founders.length;\\n            founderIdx++\\n        ) {\\n            FundObj memory currentFund = s_foundsByFounder[\\n                s_founders[founderIdx]\\n            ];\\n            ammount += currentFund.avaiableFund;\\n            s_foundsByFounder[s_founders[founderIdx]].avaiableFund = 0;\\n        }\\n\\n        (bool success, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        if (!success) revert WithdrawFailed();\\n\\n        emit FoundsWithdrawn();\\n    }\\n\\n    function withdrawCheaper() public onlyOwner {\\n        uint256 ammount;\\n        address[] memory founders = s_founders;\\n\\n        for (\\n            uint256 founderIdx = 0;\\n            founderIdx < founders.length;\\n            founderIdx++\\n        ) {\\n            FundObj memory currentFund = s_foundsByFounder[\\n                founders[founderIdx]\\n            ];\\n            ammount += currentFund.avaiableFund;\\n            s_foundsByFounder[s_founders[founderIdx]].avaiableFund = 0;\\n        }\\n\\n        (bool success, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        if (!success) revert WithdrawFailed();\\n\\n        emit FoundsWithdrawn();\\n    }\\n\\n    /**\\n     * @notice find the founder for the purpuse of adding him again or not into the founders list\\n     * @param _founder: if the founder exist\\n     */\\n    function founderExists(\\n        address _founder\\n    ) public view returns (bool, uint256) {\\n        bool exists = false;\\n        uint256 times;\\n        address[] memory founders = s_founders;\\n        for (\\n            uint256 founderIdx = 0;\\n            founderIdx < founders.length;\\n            founderIdx++\\n        ) {\\n            if (founders[founderIdx] == _founder) {\\n                exists = true;\\n                times++;\\n            }\\n        }\\n        return (exists, times);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getAgregator() public view returns (AggregatorV3Interface) {\\n        return s_agregator;\\n    }\\n\\n    function getFounderFounds(\\n        address founder\\n    ) public view returns (FundObj memory) {\\n        FundObj memory founderFunds = s_foundsByFounder[founder];\\n        return founderFunds;\\n    }\\n\\n    receive() external payable {\\n        if (msg.value > 0) {\\n            fund();\\n        }\\n    }\\n\\n    fallback() external payable {\\n        if (msg.value > 0) {\\n            fund();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7db1f8d413b38c9d421c194c04fe339aabe49905c1c816d1748f058ec73e4448\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012df380380620012df83398181016040528101906200003791906200011c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e482620000b7565b9050919050565b620000f681620000d7565b81146200010257600080fd5b50565b6000815190506200011681620000eb565b92915050565b600060208284031215620001355762000134620000b2565b5b6000620001458482850162000105565b91505092915050565b608051611167620001786000396000818161037c0152818161075601526107ef01526111676000f3fe6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e814610121578063952850f71461014c578063a13fe71f14610189578063b60d4288146101a05761008d565b80631910b6a0146100a15780633ccfd60b146100cc578063400e6c58146100e35761008d565b3661008d57600034111561008b5761008a6101aa565b5b005b600034111561009f5761009e6101aa565b5b005b3480156100ad57600080fd5b506100b6610351565b6040516100c39190610c6d565b60405180910390f35b3480156100d857600080fd5b506100e161037a565b005b3480156100ef57600080fd5b5061010a60048036038101906101059190610ccb565b610634565b604051610118929190610d2c565b60405180910390f35b34801561012d57600080fd5b50610136610752565b6040516101439190610d64565b60405180910390f35b34801561015857600080fd5b50610173600480360381019061016e9190610ccb565b61077a565b6040516101809190610dbd565b60405180910390f35b34801561019557600080fd5b5061019e6107ed565b005b6101a86101aa565b005b60006101df60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610b0790919063ffffffff16565b905060006101ec33610634565b5090506802b5e3af16b1880000821015610232576040517fc4d8970800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061029b576001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546102ed9190610e07565b9250508190555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546103469190610e07565b925050819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ff576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600090505b600180549050811015610560576000600260006001848154811061042e5761042d610e3b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090508060200151836104c49190610e07565b9250600060026000600185815481106104e0576104df610e3b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050808061055890610e6a565b915050610407565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161058790610ee3565b60006040518083038185875af1925050503d80600081146105c4576040519150601f19603f3d011682016040523d82523d6000602084013e6105c9565b606091505b5050905080610604576040517f750b219c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fe5975699205368c0751a6f32875a9f5c15b00fdf3fb5658b307a8ab68deb57ec60405160405180910390a15050565b6000806000808060018054806020026020016040519081016040528092919081815260200182805480156106bd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610673575b5050505050905060005b8151811015610743578673ffffffffffffffffffffffffffffffffffffffff168282815181106106fa576106f9610e3b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036107305760019350828061072c90610e6a565b9350505b808061073b90610e6a565b9150506106c7565b50828294509450505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610782610bd4565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905080915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610872576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060018054806020026020016040519081016040528092919081815260200182805480156108f757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108ad575b5050505050905060005b8151811015610a325760006002600084848151811061092357610922610e3b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090508060200151846109969190610e07565b9350600060026000600185815481106109b2576109b1610e3b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550508080610a2a90610e6a565b915050610901565b5060003373ffffffffffffffffffffffffffffffffffffffff1647604051610a5990610ee3565b60006040518083038185875af1925050503d8060008114610a96576040519150601f19603f3d011682016040523d82523d6000602084013e610a9b565b606091505b5050905080610ad6576040517f750b219c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fe5975699205368c0751a6f32875a9f5c15b00fdf3fb5658b307a8ab68deb57ec60405160405180910390a1505050565b600080610b1383610b43565b90506000670de0b6b3a76400008286610b2c9190610ef8565b610b369190610f69565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb5919061103e565b5050509150506402540be40081610bcc91906110b9565b915050919050565b604051806040016040528060008152602001600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c33610c2e610c2984610bee565b610c0e565b610bee565b9050919050565b6000610c4582610c18565b9050919050565b6000610c5782610c3a565b9050919050565b610c6781610c4c565b82525050565b6000602082019050610c826000830184610c5e565b92915050565b600080fd5b6000610c9882610bee565b9050919050565b610ca881610c8d565b8114610cb357600080fd5b50565b600081359050610cc581610c9f565b92915050565b600060208284031215610ce157610ce0610c88565b5b6000610cef84828501610cb6565b91505092915050565b60008115159050919050565b610d0d81610cf8565b82525050565b6000819050919050565b610d2681610d13565b82525050565b6000604082019050610d416000830185610d04565b610d4e6020830184610d1d565b9392505050565b610d5e81610c8d565b82525050565b6000602082019050610d796000830184610d55565b92915050565b610d8881610d13565b82525050565b604082016000820151610da46000850182610d7f565b506020820151610db76020850182610d7f565b50505050565b6000604082019050610dd26000830184610d8e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e1282610d13565b9150610e1d83610d13565b9250828201905080821115610e3557610e34610dd8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e7582610d13565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ea757610ea6610dd8565b5b600182019050919050565b600081905092915050565b50565b6000610ecd600083610eb2565b9150610ed882610ebd565b600082019050919050565b6000610eee82610ec0565b9150819050919050565b6000610f0382610d13565b9150610f0e83610d13565b9250828202610f1c81610d13565b91508282048414831517610f3357610f32610dd8565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f7482610d13565b9150610f7f83610d13565b925082610f8f57610f8e610f3a565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fb981610f9a565b8114610fc457600080fd5b50565b600081519050610fd681610fb0565b92915050565b6000819050919050565b610fef81610fdc565b8114610ffa57600080fd5b50565b60008151905061100c81610fe6565b92915050565b61101b81610d13565b811461102657600080fd5b50565b60008151905061103881611012565b92915050565b600080600080600060a0868803121561105a57611059610c88565b5b600061106888828901610fc7565b955050602061107988828901610ffd565b945050604061108a88828901611029565b935050606061109b88828901611029565b92505060806110ac88828901610fc7565b9150509295509295909350565b60006110c482610fdc565b91506110cf83610fdc565b92508282026110dd81610fdc565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561111557611114610dd8565b5b828205841483151761112a57611129610dd8565b5b509291505056fea26469706673582212201f9da66f03db67219f69c316359ecce66accb8cdc49606bfbd9cef08eb6513f664736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063893d20e81161004e578063893d20e814610121578063952850f71461014c578063a13fe71f14610189578063b60d4288146101a05761008d565b80631910b6a0146100a15780633ccfd60b146100cc578063400e6c58146100e35761008d565b3661008d57600034111561008b5761008a6101aa565b5b005b600034111561009f5761009e6101aa565b5b005b3480156100ad57600080fd5b506100b6610351565b6040516100c39190610c6d565b60405180910390f35b3480156100d857600080fd5b506100e161037a565b005b3480156100ef57600080fd5b5061010a60048036038101906101059190610ccb565b610634565b604051610118929190610d2c565b60405180910390f35b34801561012d57600080fd5b50610136610752565b6040516101439190610d64565b60405180910390f35b34801561015857600080fd5b50610173600480360381019061016e9190610ccb565b61077a565b6040516101809190610dbd565b60405180910390f35b34801561019557600080fd5b5061019e6107ed565b005b6101a86101aa565b005b60006101df60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610b0790919063ffffffff16565b905060006101ec33610634565b5090506802b5e3af16b1880000821015610232576040517fc4d8970800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061029b576001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b34600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546102ed9190610e07565b9250508190555034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546103469190610e07565b925050819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ff576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600090505b600180549050811015610560576000600260006001848154811061042e5761042d610e3b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090508060200151836104c49190610e07565b9250600060026000600185815481106104e0576104df610e3b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050808061055890610e6a565b915050610407565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161058790610ee3565b60006040518083038185875af1925050503d80600081146105c4576040519150601f19603f3d011682016040523d82523d6000602084013e6105c9565b606091505b5050905080610604576040517f750b219c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fe5975699205368c0751a6f32875a9f5c15b00fdf3fb5658b307a8ab68deb57ec60405160405180910390a15050565b6000806000808060018054806020026020016040519081016040528092919081815260200182805480156106bd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610673575b5050505050905060005b8151811015610743578673ffffffffffffffffffffffffffffffffffffffff168282815181106106fa576106f9610e3b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036107305760019350828061072c90610e6a565b9350505b808061073b90610e6a565b9150506106c7565b50828294509450505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610782610bd4565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905080915050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610872576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060018054806020026020016040519081016040528092919081815260200182805480156108f757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108ad575b5050505050905060005b8151811015610a325760006002600084848151811061092357610922610e3b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090508060200151846109969190610e07565b9350600060026000600185815481106109b2576109b1610e3b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550508080610a2a90610e6a565b915050610901565b5060003373ffffffffffffffffffffffffffffffffffffffff1647604051610a5990610ee3565b60006040518083038185875af1925050503d8060008114610a96576040519150601f19603f3d011682016040523d82523d6000602084013e610a9b565b606091505b5050905080610ad6576040517f750b219c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fe5975699205368c0751a6f32875a9f5c15b00fdf3fb5658b307a8ab68deb57ec60405160405180910390a1505050565b600080610b1383610b43565b90506000670de0b6b3a76400008286610b2c9190610ef8565b610b369190610f69565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610b91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb5919061103e565b5050509150506402540be40081610bcc91906110b9565b915050919050565b604051806040016040528060008152602001600081525090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c33610c2e610c2984610bee565b610c0e565b610bee565b9050919050565b6000610c4582610c18565b9050919050565b6000610c5782610c3a565b9050919050565b610c6781610c4c565b82525050565b6000602082019050610c826000830184610c5e565b92915050565b600080fd5b6000610c9882610bee565b9050919050565b610ca881610c8d565b8114610cb357600080fd5b50565b600081359050610cc581610c9f565b92915050565b600060208284031215610ce157610ce0610c88565b5b6000610cef84828501610cb6565b91505092915050565b60008115159050919050565b610d0d81610cf8565b82525050565b6000819050919050565b610d2681610d13565b82525050565b6000604082019050610d416000830185610d04565b610d4e6020830184610d1d565b9392505050565b610d5e81610c8d565b82525050565b6000602082019050610d796000830184610d55565b92915050565b610d8881610d13565b82525050565b604082016000820151610da46000850182610d7f565b506020820151610db76020850182610d7f565b50505050565b6000604082019050610dd26000830184610d8e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e1282610d13565b9150610e1d83610d13565b9250828201905080821115610e3557610e34610dd8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e7582610d13565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ea757610ea6610dd8565b5b600182019050919050565b600081905092915050565b50565b6000610ecd600083610eb2565b9150610ed882610ebd565b600082019050919050565b6000610eee82610ec0565b9150819050919050565b6000610f0382610d13565b9150610f0e83610d13565b9250828202610f1c81610d13565b91508282048414831517610f3357610f32610dd8565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f7482610d13565b9150610f7f83610d13565b925082610f8f57610f8e610f3a565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610fb981610f9a565b8114610fc457600080fd5b50565b600081519050610fd681610fb0565b92915050565b6000819050919050565b610fef81610fdc565b8114610ffa57600080fd5b50565b60008151905061100c81610fe6565b92915050565b61101b81610d13565b811461102657600080fd5b50565b60008151905061103881611012565b92915050565b600080600080600060a0868803121561105a57611059610c88565b5b600061106888828901610fc7565b955050602061107988828901610ffd565b945050604061108a88828901611029565b935050606061109b88828901611029565b92505060806110ac88828901610fc7565b9150509295509295909350565b60006110c482610fdc565b91506110cf83610fdc565b92508282026110dd81610fdc565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561111557611114610dd8565b5b828205841483151761112a57611129610dd8565b5b509291505056fea26469706673582212201f9da66f03db67219f69c316359ecce66accb8cdc49606bfbd9cef08eb6513f664736f6c63430008120033",
  "devdoc": {
    "author": "edmund",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "use testnet address or get an address from local blockchains",
        "params": {
          "agregatorAddress": ":this is the address which contains the price from eth to usd"
        }
      },
      "founderExists(address)": {
        "params": {
          "_founder": ": if the founder exist"
        }
      },
      "withdraw()": {
        "details": "this function should be only called by the contract's owner"
      }
    },
    "title": "Thid is a contract for croud founding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "founderExists(address)": {
        "notice": "find the founder for the purpuse of adding him again or not into the founders list"
      },
      "fund()": {
        "notice": "the fund function is public for those who want to fund or donate a minimun usd as eth"
      },
      "withdraw()": {
        "notice": "this function does not restore the ones that have founded this contract, they are registered forever"
      }
    },
    "notice": "this contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 116,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_agregator",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 119,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_founders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 124,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_foundsByFounder",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(FundObj)129_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(FundObj)129_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FundMe.FundObj)",
        "numberOfBytes": "32",
        "value": "t_struct(FundObj)129_storage"
      },
      "t_struct(FundObj)129_storage": {
        "encoding": "inplace",
        "label": "struct FundMe.FundObj",
        "members": [
          {
            "astId": 126,
            "contract": "contracts/FundMe.sol:FundMe",
            "label": "totalFunds",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 128,
            "contract": "contracts/FundMe.sol:FundMe",
            "label": "avaiableFund",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}